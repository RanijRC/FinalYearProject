<SfDialog Width="100px" IsModal="true" ShowCloseIcon="true" @bind-Visible="IsVisible">
    <DialogEvents OnOpen="OpenContextMenu"></DialogEvents>
    <DialogTemplates>
        <Header>Management Menu</Header>
        <Content>
            <div class="hstack gap-2 mb-2" id="cursorStyle" @onclick="ViewClicked">
                <i class="bi bi-eye text-info"></i>
                <span id="cursorStyle" class="text-info">View</span>
            </div>
            <div class="hstack gap-2 mb-2" id="cursorStyle" @onclick="EditClicked">
                <i class="bi bi-pencil text-primary"></i>
                <span id="cursorStyle" class="text-primary">Edit</span>
            </div>
            <div class="hstack gap-2 mb-2" id="cursorStyle" @onclick="DeleteClicked">
                <i class="bi bi-trash text-danger"></i>
                <span id="cursorStyle" class="text-danger">Delete</span>
            </div>
            <hr/>
            <div class="hstack gap-2 mb-2" id="cursorStyle" @onclick="AddPendingClicked">
                <i class="bi bi-stopwatch text-danger "></i>
                <span id="cursorStyle" class="text-danger">Send to Pending</span>
            </div>
            <div class="hstack gap-2 mb-2" id="cursorStyle" @onclick="AddFeedbackClicked">
                <i class="bi bi-backpack3 text-success"></i>
                <span id="cursorStyle" class="text-success">Add Feedback</span>
            </div>
            <div class="hstack gap-2 mb-2" id="cursorStyle" @onclick="AddCompletedClicked">
                <i class="bi bi-slack text-dark"></i>
                <span id="cursorStyle" class="text-dark">Add Completed</span>
            </div>
        </Content>
    </DialogTemplates>
</SfDialog>

<style>
    #cursorStyle {
        cursor: pointer
    }
</style>

@code{
    SfDialog? OpenDialog;
    private bool IsVisible {get; set;} = false;

    [Parameter] public EventCallback HandleViewClicked {get; set;}
    private async Task ViewClicked() => await HandleViewClicked.InvokeAsync();

    [Parameter] public EventCallback HandleEditClicked { get; set; }
    private async Task EditClicked() => await HandleEditClicked.InvokeAsync();

    [Parameter] public EventCallback HandleDeleteClicked { get; set; }
    private async Task DeleteClicked() => await HandleDeleteClicked.InvokeAsync();

    [Parameter] public EventCallback HandleAddPendingClicked { get; set; }
    private async Task AddPendingClicked() => await HandleAddPendingClicked.InvokeAsync();

    [Parameter] public EventCallback HandleAddFeedbackClicked { get; set; }
    private async Task AddFeedbackClicked() => await HandleAddFeedbackClicked.InvokeAsync();

    [Parameter] public EventCallback HandleAddCompletedClicked { get; set; }
    private async Task AddCompletedClicked() => await HandleAddCompletedClicked.InvokeAsync();

    public void OpenContextMenu()
    {
        IsVisible = true;
        StateHasChanged();
    }

    public void CloseContextMenu()
    {
        IsVisible = false;
        StateHasChanged();
    }
}