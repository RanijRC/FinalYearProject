@implements IDisposable
@if (allState.ShowDataPendingType)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">DataPending Reasons</h4>
                        <button class="btn btn-outline-success float-end" @onclick="OpenDialog">
                            <i class="bi bi-plus-circle-dotted"></i>Add Reason
                        </button>
                    </div>
                    <div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Reason</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Types is not null)
                                    {
                                        int count = 1;
                                        foreach (var item in Types)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Id</td>
                                                <td>@item.Name</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle"
                                                       @onclick="() => EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle"
                                                       @onclick="() => DeleteClicked(item)"></i>
                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4"><div class="alert alert-info text-center">No Reason added</div></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<style>
    .cursorStyle {
        cursor: pointer
    }
</style>
<DataPendingTypeDialog @ref="pendingtypeDialog"
                       HandleSaveOperationEvent="HandleSaveOperationEvent"
                       DataPendingType="DataPendingType" />

@code {
    DataPendingTypeDialog? pendingtypeDialog;
    DataPendingType DataPendingType = new();
    public string Title { get; set; } = "Add";
    public List<DataPendingType> Types { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetTypes();
        allState.Action += StateHasChanged;
    }

    private async Task GetTypes() => Types = await pendingtypeService.GetAll(Constants.DataPendingTypeBaseUrl);

    void OpenDialog() => pendingtypeDialog?.OpenDialog();

    //Add or Update
    private async Task HandleSaveOperationEvent(DataPendingType item)
    {
        bool successCheck = false;
        if (item.Id > 0)
        {
            var result = await pendingtypeService.Update(item, Constants.DataPendingTypeBaseUrl);
            successCheck = await DisplayMessage(result.flag, result.Message);
        }
        else
        {
            var response = await pendingtypeService.Insert(item, Constants.DataPendingTypeBaseUrl);
            successCheck = await DisplayMessage(response.flag, response.Message);
        }
        if (successCheck)
        {
            DataPendingType = new();
            await GetTypes();
            pendingtypeDialog?.ChangeTitle("Add");
        }
    }

    //Edit
    private void EditClicked(DataPendingType item)
    {
        pendingtypeDialog?.ChangeTitle("Update");
        DataPendingType = item;
        OpenDialog();
    }

    //Delete
    private async Task DeleteClicked(DataPendingType item)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you want to delete {item.Name}?", "Confirm Delete");
        if (!confirm) return;

        var response = await pendingtypeService.DeleteById(item.Id, Constants.DataPendingTypeBaseUrl);
        if (await DisplayMessage(response.flag, response.Message))
            await GetTypes();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }

}
