@implements IDisposable
@if (allState.ShowComplaintComplete)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card border-danger shadow-lg">
                    <div class="card-header">
                        <h4 class="float-start">Manage Complaint Completion</h4>
                    </div>
                    <div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll;">
                        <div class="card-body">
                            @{
                                var Tool = (new List<string>() { "Search", "Excel Export", "PDF Export", "Print" });
                            }
                            <SfGrid DataSource="@ComplaintCompletes" AllowPaging="true" AllowSorting="true" Toolbar="@Tool"
                                    AllowExcelExport="true" @ref="DefaultGrid" AllowPdfExport="true">
                                <GridPageSettings PageSize="5"></GridPageSettings>
                                <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="ComplaintComplete"></GridEvents>
                                <GridColumns>
                                    <GridColumn Field=@nameof(ComplaintComplete.ComplaintId) HeaderText="Id"></GridColumn>
                                    <GridColumn HeaderText="Type">
                                        <Template>
                                            @{
                                                var item = (context as ComplaintComplete);
                                                <div>
                                                    @item!.ComplaintCompleteType!.Name
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(ComplaintComplete.StartDate) HeaderText="Start Date"></GridColumn>
                                    <GridColumn Field=@nameof(ComplaintComplete.EndDate) HeaderText="End Date"></GridColumn>
                                    <GridColumn Field=@nameof(ComplaintComplete.NumberOfDays) HeaderText="Number of Days"></GridColumn>
                                    <GridColumn HeaderText="Action">
                                        <Template>
                                            @{
                                                var complaint = (context as ComplaintComplete);
                                                <div>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(complaint!)"></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="() => DeleteClicked(complaint!)"></i>
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<style>
    .cursorStyle {
        cursor: pointer
    }
</style>
<ComplaintCompleteDialog @ref="completeDialog" 
    ItemModel="ItemModel" 
    ComplaintCompleteTypes="ComplaintCompleteTypes"
    HandleSaveOperationEvent="HandleSaveOperationEvent"/>

@code {
    private SfGrid<ComplaintComplete>? DefaultGrid;
    ComplaintCompleteDialog? completeDialog;
    ComplaintComplete ItemModel = new();
    public List<ComplaintComplete> ComplaintCompletes { get; set; } = new();
    public List<ComplaintCompleteType> ComplaintCompleteTypes { get; set; } = new();
    protected async override Task OnInitializedAsync()
    {
        await GetTypes();
        await GetComplete();
        allState.Action += StateHasChanged;
    }

    private async Task GetTypes() => ComplaintCompleteTypes = await completetypeService.GetAll(Constants.ComplaintCompleteTypeBaseUrl);

    private async Task GetComplete() => ComplaintCompletes = await complaintcompleteService.GetAll(Constants.ComplaintCompleteBaseUrl);

    void OpenDialog() => completeDialog?.OpenDialog();

    private async Task HandleSaveOperationEvent(ComplaintComplete item)
    {
        var result = await complaintcompleteService.Update(item, Constants.ComplaintCompleteBaseUrl);
        bool successCheck = await DisplayMessage(result.flag, result.Message);
        if (successCheck)
        {
            ItemModel = new();
            await GetComplete();
        }
    }

    private void EditClicked(ComplaintComplete item)
    {
        ItemModel = item;
        OpenDialog();
    }

    private async Task DeleteClicked(ComplaintComplete item)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete this?", "Confirm Delete");
        if (!confirm) return;

        var response = await complaintcompleteService.DeleteById(item.ComplaintId, Constants.ComplaintCompleteBaseUrl);
        var result = await DisplayMessage(response.flag, response.Message);
        if (result)
            await GetComplete();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Excel Export")
            await this.DefaultGrid!.ExcelExport()!;

        if (args.Item.Text == "PDF Export")
            await this.DefaultGrid!.PdfExport()!;
    }

    public void Dispose() => allState.Action -= StateHasChanged;

}