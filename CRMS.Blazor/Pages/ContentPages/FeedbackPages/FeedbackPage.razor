@implements IDisposable
@if (allState.ShowFeedback)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card border-warning shadow-lg">
                    <div class="card-header"><h4 class="float-start">Feedback Comments</h4></div>
                    <div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll;">
                        <div class="card-body">
                            @{
                                var Tool = (new List<string>() { "Search", "ExcelExport", "PdfExport", "Print" });
                            }
                            <SfGrid DataSource="@Feedbacks" AllowPaging="true" AllowSorting="true" 
                                Toolbar="@Tool" AllowExcelExport="true" @ref="DefaultGrid" AllowPdfExport="true">
                                <GridPageSettings PageSize="5"></GridPageSettings>
                                <GridEvents OnToolbarClick="ToolbarClickHanlder" TValue="Feedback"></GridEvents>
                                <GridColumns>
                                    <GridColumn Field=@nameof(Feedback.ComplaintId) HeaderText="ID"></GridColumn>
                                    <GridColumn Field=@nameof(Feedback.ComplaintFeedback) HeaderText="Complaint Feedback"></GridColumn>
                                    <GridColumn Field=@nameof(Feedback.FeedbackRecomendation) HeaderText="Recommendation"></GridColumn>
                                    <GridColumn Field=@nameof(Feedback.Date) HeaderText="ID"></GridColumn>
                                    <GridColumn HeaderText="Action">
                                        <Template>
                                            @{
                                                var complaint = (context as Feedback);
                                                <div>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(complaint!)"></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="() => DeleteClicked(complaint!)"></i>
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    #cursorStyle {
        cursor:pointer
    }
</style>
<FeedbackDialog @ref="feedbackDialog"
                Feedback="Feedback"
                HandleSaveOperationEvent="HandleSaveOperationEvent" />
@code {
    private SfGrid<Feedback>? DefaultGrid;
    FeedbackDialog? feedbackDialog;
    Feedback Feedback = new();
    public List<Feedback> Feedbacks { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetComment();
        allState.Action += StateHasChanged;
    }

    private async Task GetComment() => Feedbacks = await feedbackService.GetAll(Constants.FeedbackBaseUrl);

    void AddButtonClicked()
    {
        Feedback = new();
        OpenDialog();
    }

    void OpenDialog() => feedbackDialog?.OpenDialog();

    private async Task HandleSaveOperationEvent(Feedback feedback)
    {
        var result = await feedbackService.Update(feedback, Constants.FeedbackBaseUrl);
        bool successCheck = await DisplayMessage(result.flag, result.Message);
        if (successCheck)
        {
            Feedback = new();
            await GetComment();
        }
    }

    private void EditClicked(Feedback item)
    {
        Feedback = item;
        OpenDialog();
    }

    private async Task DeleteClicked(Feedback item)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you want to delete this?","Confirm Delete");
        if (!confirm) return;

        var response = await feedbackService.DeleteById(item.ComplaintId, Constants.FeedbackBaseUrl);
        var result = await DisplayMessage(response.flag, response.Message);
        if (result)
            await GetComment();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public void Dispose() => allState.Action -= StateHasChanged;

    //Excel export / PDF Export
    public async Task ToolbarClickHanlder(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Excel Export")
            await this.DefaultGrid!.ExcelExport()!;

        if (args.Item.Text == "PDF Export")
            await this.DefaultGrid!.PdfExport()!;
    }

}
